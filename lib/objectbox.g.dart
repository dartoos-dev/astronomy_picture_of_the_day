// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/astronomy_picture_of_the_day/data/models/astronomy_picture_objectbox_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3168703955548340439),
      name: 'AstronomyPictureObjectboxModel',
      lastPropertyId: const IdUid(15, 2275275143682092085),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(5, 2120198908906054545),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7429273018699702901),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3337710852635774451),
            name: 'explanation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5350422682323446768),
            name: 'dbMediumDefinitionUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7340906312369441070),
            name: 'dbHighDefinitionUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5423974020523342320),
            name: 'pk',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(15, 2275275143682092085),
            name: 'dbId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 3168703955548340439),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        8879649020485868875,
        16197408203058411,
        2463125218402977389,
        3531957509297588360,
        377041147746122299,
        442098449268341461,
        1582449772615950773,
        3881686423032662117
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AstronomyPictureObjectboxModel:
        EntityDefinition<AstronomyPictureObjectboxModel>(
            model: _entities[0],
            toOneRelations: (AstronomyPictureObjectboxModel object) => [],
            toManyRelations: (AstronomyPictureObjectboxModel object) => {},
            getId: (AstronomyPictureObjectboxModel object) => object.pk,
            setId: (AstronomyPictureObjectboxModel object, int id) {
              object.pk = id;
            },
            objectToFB:
                (AstronomyPictureObjectboxModel object, fb.Builder fbb) {
              final titleOffset = fbb.writeString(object.title);
              final explanationOffset = fbb.writeString(object.explanation);
              final dbMediumDefinitionUrlOffset =
                  fbb.writeString(object.dbMediumDefinitionUrl);
              final dbHighDefinitionUrlOffset =
                  fbb.writeString(object.dbHighDefinitionUrl);
              final dbIdOffset = fbb.writeString(object.dbId);
              fbb.startTable(16);
              fbb.addInt64(4, object.date.millisecondsSinceEpoch);
              fbb.addOffset(5, titleOffset);
              fbb.addOffset(6, explanationOffset);
              fbb.addOffset(9, dbMediumDefinitionUrlOffset);
              fbb.addOffset(10, dbHighDefinitionUrlOffset);
              fbb.addInt64(11, object.pk);
              fbb.addOffset(14, dbIdOffset);
              fbb.finish(fbb.endTable());
              return object.pk;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final pkParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
              final dateParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
              final titleParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
              final explanationParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 16, '');
              final dbIdParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
              final dbMediumDefinitionUrlParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 22, '');
              final dbHighDefinitionUrlParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 24, '');
              final object = AstronomyPictureObjectboxModel(
                  pk: pkParam,
                  date: dateParam,
                  title: titleParam,
                  explanation: explanationParam,
                  dbId: dbIdParam,
                  dbMediumDefinitionUrl: dbMediumDefinitionUrlParam,
                  dbHighDefinitionUrl: dbHighDefinitionUrlParam);

              return object;
            })
  };

  return ModelDefinition(model, bindings);
}

/// [AstronomyPictureObjectboxModel] entity fields to define ObjectBox queries.
class AstronomyPictureObjectboxModel_ {
  /// see [AstronomyPictureObjectboxModel.date]
  static final date = QueryIntegerProperty<AstronomyPictureObjectboxModel>(
      _entities[0].properties[0]);

  /// see [AstronomyPictureObjectboxModel.title]
  static final title = QueryStringProperty<AstronomyPictureObjectboxModel>(
      _entities[0].properties[1]);

  /// see [AstronomyPictureObjectboxModel.explanation]
  static final explanation =
      QueryStringProperty<AstronomyPictureObjectboxModel>(
          _entities[0].properties[2]);

  /// see [AstronomyPictureObjectboxModel.dbMediumDefinitionUrl]
  static final dbMediumDefinitionUrl =
      QueryStringProperty<AstronomyPictureObjectboxModel>(
          _entities[0].properties[3]);

  /// see [AstronomyPictureObjectboxModel.dbHighDefinitionUrl]
  static final dbHighDefinitionUrl =
      QueryStringProperty<AstronomyPictureObjectboxModel>(
          _entities[0].properties[4]);

  /// see [AstronomyPictureObjectboxModel.pk]
  static final pk = QueryIntegerProperty<AstronomyPictureObjectboxModel>(
      _entities[0].properties[5]);

  /// see [AstronomyPictureObjectboxModel.dbId]
  static final dbId = QueryStringProperty<AstronomyPictureObjectboxModel>(
      _entities[0].properties[6]);
}
